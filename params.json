{"google":"UA-36601059-1","body":"# NIXON-&#928; :: The Raspberry Pi based Nixie Display\r\n\r\n\r\nThe Nixon-&#960; Display consists of **Nixie Tubes** provided by [Ogilumen](http://www.ogilumen.com/), driven by a **Raspberry Pi Model B** with an **I/O expansion card** from [Axiris](http://www.axiris.be/).\r\nIt's driven by a multi-threaded ruby application consisting of I/O drivers, state machines, a sinatra based web app and json api connected by message queues.\r\n\r\nWhat started out as a private idea found it's way into a mini-project on a __LABS__ team event from [Namics](http://www.namics.com).\r\n\r\nMany thanks to all who contributed and hopefully will contribute to this project!\r\n\r\n**Jump to**\r\n\r\n- [Components](#components)\r\n- [Case](#case)\r\n- [Installation](#installation)\r\n- [Service](#service)\r\n- [API](#api)\r\n\r\n\r\n##<a id=\"components\" name=\"components\"></a>Components\r\n\r\nThe following main components were used for assembly, not mentioning wiring and tools.\r\n\r\n### 1x Raspberry Pi Model B\r\n\r\n<img src=\"http://www.raspberrypi.org/wp-content/uploads/2012/04/Raspi_Iso_Blue.png\" width=\"400\" >\r\n---\r\nThe [Raspberry Pi](http://www.raspberrypi.org/) is ideal for the project as it's a fully flegded mini computer which is capable of running all the things we need.\r\n\r\nA standard installation with Debian Wheezy is recommended.\r\nInstall Ruby using the tutorial on [elinux](http://elinux.org/RPi_Ruby_on_Rails)\r\n\r\nHere's a condensed list of the commands:\r\n\r\n\tsudo apt-get install -y git curl zlib1g-dev subversion\r\n\tsudo apt-get install -y openssl libreadline6-dev git-core zlib1g libssl-dev\r\n\tsudo apt-get install -y libyaml-dev libsqlite3-dev sqlite3\r\n\tsudo apt-get install -y libxml2-dev libxslt-dev\r\n\tsudo apt-get install -y autoconf automake libtool bison\r\n\tcurl -L get.rvm.io | bash -s stable\r\n\r\n\r\n### 1x [Axiris](http://www.axiris.be/) I/O Card for Raspberry Pi\r\n\r\n<img src=\"http://www.axiris.be/en/images/stories/bcm2835/bcm2835_013_500.jpg\" width=\"400\" >\r\n---\r\nBecause the Raspberry Pi only has [limited IO capabilites](http://elinux.org/RPi_Low-level_peripherals) the [Axisis I/O card](http://www.axiris.be/en/index.php?option=com_content&view=article&id=51:i2c-io-card-for-use-with-raspberry-pi-computer&catid=14:io-cards&Itemid=34) is the perfect addition to fully satisfy our needs. It adds:\r\n\r\n* a very high accuracy real-time clock based on the PCF2129A with CR2032 backup battery.\r\n* 8 quasi bidirectional I/O lines (PCF8574), 5V levels.\r\n* 8 12-bit ADC inputs (MAX11614EEE+), 0 - 4.096V range.\r\n* 16 output channels providing 12-bit pulse-width modulation (PWM) output channels at about 40 to 1000 Hz with LED drive capability, 10 mA source, 25 mA sink, 5 V levels.\r\n\r\nThe repository contains a modified driver to allow direct console output - without the need to start a telnet server in order to control the expansion card.\r\nHowever, you're still able to use the telnet server while developing - with it you can remotely execute the code with a live connection.\r\n\r\n### 6x Nixie Duo Kits\r\n\r\n<img src=\"http://www.ogilumen.com/images/product_pics/n2xdp1.jpg\" width=\"400\" >\r\n---\r\n\r\n[Ogilumen](http://www.ogilumen.com/) sells beautiful, compact and easy to assemble nixie tube kits containing two IN-12A tubes each.\r\nSome electronics are needed so we're able to drive them using the 12-bit PWM channels.\r\n\r\n**Electric diagram**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/nixie_duo_diagram.png\" width=\"400\" >\r\n\r\n\r\n### 4x IN-13 Bar Graphs\r\n\r\n\r\n<img src=\"http://www.ogilumen.com/images/product_pics/IN-13a.jpg\" width=\"400\" >\r\n---\r\n\r\nThe IN-13 Neon Bar Graphs sold by Ogilumen are a beautiful way to display a variable length glowing bar.\r\n\r\n**Electric diagram**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/bargraph_diagram.png\" width=\"400\" >\r\n\r\n\r\n### 5x IN-1 Neon\r\n\r\n\r\n<img src=\"http://www.ogilumen.com/images/product_pics/n1a.jpg\" width=\"400\" >\r\n---\r\nThe IN-1 Neon Lamps are simply a nice LED-alternative and they have a nice warm orange glow...\r\n\r\n**Electric diagram**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/lamp_diagram.png\" width=\"400\" >\r\n\r\n\r\n## 1x 50 mA Nixie Tube Power Supply\r\n\r\n<img src=\"http://www.ogilumen.com/images/product_pics/smps1.jpg\" width=\"400\" >\r\n---\r\n\r\nIn the end we need a power supply to drive all our high-voltage Nixie goodness. Luckly ogilumen provides us with a readily assembled power supply capable of providing all the power we need...\r\nIf you want to power everything with a 12V power supply, use a voltage divider and a modified micro-usb jack to power the raspberry pi.\r\n\r\n**Voltage divider electric diagram**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/voltage_divider_diagram.png\" width=\"400\" >\r\n\r\n##<a id=\"case\" name=\"case\"></a> Case\r\n\r\nThe casing gives the nixon-pi a retro look - it should remind one of a sixties radio. A swiss carpentry manufactured the wooden casing - the rest was assembled by hand.\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/front_plate.png\" width=\"800\">\r\n\r\n## <a id=\"installation\" name=\"installation\"></a>Installation\r\n\r\nAlthough nixon-pi can be packed as a gem it's currently suggested to install it by cloning the repository.\r\nThe master branch contains the newest production release.\r\n\r\n##<a id=\"service\" name=\"service\"></a> The Service\r\n\r\nA telnet based client to drive nixie tubes via rest interface\r\n\r\n## Comand line options\r\n\t\r\n\tbin/nixon-pi -h\r\n\tUsage: nixon-pi [options]\r\n\t    -e env                           set the environment (default is development, others are test and production)\r\n\t    -m                               force the usage of the telnet mock interface\r\n\t    -p port                          set the webserver port (default is 8080)\r\n\t    -h, --help                       Display help\r\n\r\nThe application drops a .yml configuration file in the users home directory. Review and adjust if neccessary...    \r\n\r\n### Manage the daemon process\r\n\r\n    ruby bin/nixonpi.rb start\r\n    ruby bin/nixonpi.rb restart\r\n    ruby bin/nixonpi.rb stop\r\n\r\n### Controlling\r\n\r\nThe daemon is controlled via sinatra web application, see the example page at [server ip]:[port]\r\n\r\n## The Gem\r\n\r\nThe Nixon-&#960; Service is packed as a standalone gem which can be run as a daemon.\r\n\r\n### Build\r\n\r\nBuild with\r\n\r\n    gem build nixon-pi.gemspec\r\n\r\n\r\n### Install\r\n\r\n    $ gem install nixie-berry-service\r\n\r\n\r\n### State machines\r\n\r\nThe service uses a state machine to handle local executions.\r\nGenerate state machine diagrams with the following command:\r\n\r\n\r\n\trake state_machine:draw FILE=./lib/nixonpi/state_machines/tube_state_machine.rb CLASS=NixonPi::TubeStateMachine\r\n\trake state_machine:draw FILE=./lib/nixonpi/state_machines/bar_state_machine.rb CLASS=NixonPi::BarStateMachine\r\n\trake state_machine:draw FILE=./lib/nixonpi/state_machines/lamp_state_machine.rb CLASS=NixonPi::LampStateMachine\r\n\r\n**Tube State Machine**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/TubeStateMachine_state.png\" width=\"400\">\r\n\r\n**Bar State Machine**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/BarStateMachine_state.png\" width=\"400\">\r\n\r\n**Lamp State Machine**\r\n\r\n<img src=\"https://dl.dropbox.com/u/23566127/nixon-pi_images/LampStateMachine_state.png\" width=\"400\">\r\n\t\r\n\t\r\n#<a id=\"api\" name=\"api\"></a> API\r\n\r\nAll api requests can be made as either .html or .json.\r\n**JSONP** is returned to support 3rd party apps.\r\n\r\n## Port\r\n\r\nThe web server port can be configured in the nixonpi-settings.yml file inside your home directory.\r\n\r\n\tprodiction:\r\n\t  web_server:\r\n\t    port: 3000\r\n\r\n\r\n## POST Requests\r\n\r\nPost requests to control the nixon-pi.\r\n\r\n### POST /tubes\r\n\r\nControl the IN-12A digit tubes.\r\nThe Tubes allow values from 0 to 9 including _ (Space) for no value.\r\n\r\n| Parameters | Values | Data Type | Description  | Required |\r\n| ---------- | ------ | --------- | ------------ | -------- |\r\n| state | time, free_value, animation, countdown, run_test | String | State of the state machine | * |\r\n| value | 0-9 or _ (Space) | String | Max. length 12 | * |\r\n| time_format | ex: \"%H%M%S\" | String | only in state \"time\" | |\r\n| animation_name | single_fly_in, count_from_to, switch_numbers | String |  | |\r\n| options |  | JSON | Advanced options hash | |\r\n| initial_mode | true, false | Boolean | Load on startup | |\r\n\r\n### POST /lamps\r\n\r\nControl the IN-1 neon tubes.\r\nThe neon tubes can either be turned on or off - they're like orange LEDs.\r\n\r\n| Parameters | Values | Data Type | Description  | Required |\r\n| ---------- | ------ | --------- | ------------ | -------- |\r\n| state | free_value, animation, run_test | String |  State of the state machine  | * |\r\n| values | Array of 0 or 1 | Array of Integer | Max. length 5 | * |\r\n| animation_name | single_fly_in, count_from_to, switch_numbers | String |  | |\r\n| options |  | JSON |Advanced options hash | |\r\n| initial_mode | true, false | Boolean |Load on startup | |\r\n\r\n### POST /bars\r\n\r\nControl the IN-13 bargraph tubes.\r\nThe bargraphs are a linear display to visualize a value between 0 (off) and 255 (full width).\r\n\r\n| Parameters | Values | Data Type | Description  | Required |\r\n| ---------- | ------ | --------- | ------------ | -------- |\r\n| state | free_value, animation | String | State of the state machine | * |\r\n| values | Array of 0 to 255 | Array of Integer |Max. length 4 | * |\r\n| animation_name | ramp_up_down | String | | |\r\n| options |  | JSON | Advanced options hash | |\r\n| initial_mode | true, false | Boolean |Load on startup | |\r\n\r\n### POST /say\r\n\r\nSynthesize text to speech.\r\n\r\n| Parameters | Values | Data Type | Description  | Required |\r\n| ---------- | ------ | --------- | ------------ | -------- |\r\n| value | Hello World | String | TTS String | * |\r\n\r\n### POST /power\r\n\r\nControl the high-voltage power supply.\r\n\r\n| Parameters | Values | Data Type | Description  | Required |\r\n| ---------- | ------ | --------- | ------------ | -------- |\r\n| value | 0 or 1 | String | Turn on or off the high voltage power supply | * |\r\n\r\n### POST /scheduler\r\n\r\n## GET Requests\r\n\r\nGet requests to get information about the nixon-pi.\r\n\r\n### GET /info/:target.:format\r\n\r\nGet information about the current state of a specified state machine.\r\n\r\n| Parameters | Values |\r\n| ---------- | ------ |\r\n| :target | tubes, bars, lamps, power |\r\n| :format | html, json |\r\n\r\n**Example:**\r\n\r\n\twget http://localhost:3000/info/tubes.json\r\n\r\nReturns:\r\n\r\n\t{\r\n\t    \"info\": {\r\n\t        \"animation_name\": \"single_fly_in\",\r\n\t        \"options\": {},\r\n\t        \"last_value\": \"214740\",\r\n\t        \"last_state\": \"animation\",\r\n\t        \"state\": \"time\",\r\n\t        \"last_time\": \"2013-01-16T21:47:40+01:00\"\r\n\t    },\r\n\t    \"message\": \"tubes set to\",\r\n\t    \"success\": true\r\n\t}\r\n\r\n### GET /info.:format\r\n\r\nGet hardware information about the Raspberry-Pi I/O expansion card.\r\nInformation include:\r\n\r\n* RTC - Real time clock\r\n* IO  - GPIO driver\r\n* ADC - Analog digital converter driver\r\n* PWM - Pulse width modulation driver\r\n\r\n\r\n| Parameters | Values |\r\n| ---------- | ------ |\r\n| :format | html, json |\r\n\r\n**Example:**\r\n\r\n\twget http://localhost:3000/info.json\r\n\r\nReturns:\r\n\r\n\t{\r\n\t    \"info\": {\r\n\t        \"rtc\": \"1\",\r\n\t        \"io\": \"1\",\r\n\t        \"adc\": \"1\",\r\n\t        \"pwm\": \"1\"\r\n\t    },\r\n\t    \"message\": \"Hardware information\",\r\n\t    \"success\": true\r\n\t}\r\n\r\n### GET /command/:target.:format\r\n\r\nGet a json containing all available commands for a specified target.\r\n\r\n| Parameters | Values |\r\n| ---------- | ------ |\r\n| :target | tubes, bars, lamps, power, say |\r\n| :format | html, json |\r\n\r\n**Example:**\r\n\r\n\tcurl http://localhost:3000/command/tubes.json\r\n\r\nReturns:\r\n\r\n\t{\r\n\t    \"state\": null,\r\n\t    \"value\": null,\r\n\t    \"time_format\": null,\r\n\t    \"animation_name\": null,\r\n\t    \"options\": null,\r\n\t    \"initial_mode\": null\r\n\t}\r\n\r\n### GET /commands.:format\r\n\r\nGet a json of all available commands.\r\n\r\n| Parameters | Values |\r\n| ---------- | ------ |\r\n| :format | html, json |\r\n\r\n\r\nReturn a json of available commands and parameters.\r\n\r\n**Example:**\r\n\r\n\tcurl http://localhost:3000/commands.json\r\n\r\nReturns:\r\n\r\n\t{\r\n\t    \"tubes\": {\r\n\t        \"state\": null,\r\n\t        \"value\": null,\r\n\t        \"time_format\": null,\r\n\t        \"animation_name\": null,\r\n\t        \"options\": null,\r\n\t        \"time\": null,\r\n\t        \"initial_mode\": null\r\n\t    },\r\n\t    \"bars\": {\r\n\t        \"state\": null,\r\n\t        \"values\": null,\r\n\t        \"animation_name\": null,\r\n\t        \"options\": null,\r\n\t        \"time\": null,\r\n\t        \"initial_mode\": null\r\n\t    },\r\n\t    \"lamps\": {\r\n\t        \"state\": null,\r\n\t        \"values\": null,\r\n\t        \"animation_name\": null,\r\n\t        \"options\": null,\r\n\t        \"time\": null,\r\n\t        \"initial_mode\": null\r\n\t    },\r\n\t    \"power\": {\r\n\t        \"value\": null,\r\n\t        \"time\": null\r\n\t    },\r\n\t    \"say\": {\r\n\t        \"value\": null,\r\n\t        \"time\": null\r\n\t    },\r\n\t    \"message\": \"Available commands\",\r\n\t    \"success\": true\r\n\t}\r\n\r\n## DELETE Requests\r\n\r\nDelete saved values.\r\n\r\n### DELETE /schedule/:id\r\n\r\nDelete a saved schedule.\r\n\r\n| Parameters | Values |\r\n| ---------- | ------ |\r\n| :id | id of an existing schedule |\r\n\r\n\r\n**Example**\r\n\r\n    curl -X DELETE http://localhost/schedule/1\r\n\r\nReturns:\r\n\r\n\t{\r\n\t\t\"success\":true,\r\n\t\t\"message\":\"Schedule deleted\"\r\n\t}\r\n\t\r\n\r\n","name":"Nixon-Pi","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Raspberry Pi + Nixie Tubes "}